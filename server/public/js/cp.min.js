!function(r){function o(t){if(n[t])return n[t].exports;var e=n[t]={"exports":{},"id":t,"loaded":!1};return r[t].call(e.exports,e,e.exports,o),e.loaded=!0,e.exports}var n={};o.m=r,o.c=n,o.p="",o(0)}([function(r,o,n){r.exports=n(1)},function(r,o,n){"use strict";n(2)},function(r,o){"use strict";var n=function(){return function(r,o){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return function(r,o){var n=[],t=!0,e=!1,l=void 0;try{for(var a,i=r[Symbol.iterator]();!(t=(a=i.next()).done)&&(n.push(a.value),!o||n.length!==o);t=!0);}catch(r){e=!0,l=r}finally{try{!t&&i["return"]&&i["return"]()}finally{if(e)throw l}}return n}(r,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),t=Array.from({"0":"a","1":"b","2":"c","length":3});console.log(t),console.log(Array.from([1,2,3],function(r){return 2*r}));var e=Array.of(3,4,7,9,11);console.log(e);var l=Array.of();console.log("empty",l),console.log([1,"a",void 0].fill(7)),console.log([1,"a",void 0].fill(7,1,2));for(var a=[1,"a","b"],i=0;i<a.length;i++){var c=a[i];console.log("遍历数组元素值",c)}var u=!0,f=!1,s=void 0;try{for(var y,v=[1,"a","b"].keys()[Symbol.iterator]();!(u=(y=v.next()).done);u=!0){var d=y.value;console.log("这样遍历就变成数组索引了",d)}}catch(r){f=!0,s=r}finally{try{!u&&v.return&&v.return()}finally{if(f)throw s}}var g=!0,h=!1,b=void 0;try{for(var p,x=[1,"a","b"].values()[Symbol.iterator]();!(g=(p=x.next()).done);g=!0){var m=p.value;console.log("遍历数组元素值",m)}}catch(r){h=!0,b=r}finally{try{!g&&x.return&&x.return()}finally{if(h)throw b}}var w=!0,A=!1,N=void 0;try{for(var S,I=[1,"a","b"].entries()[Symbol.iterator]();!(w=(S=I.next()).done);w=!0){var j=n(S.value,2),k=j[0],E=j[1];console.log("遍历数组索引及元素值",k,E)}}catch(r){A=!0,N=r}finally{try{!w&&I.return&&I.return()}finally{if(A)throw N}}console.log([1,2,3,4,5].copyWithin(0,3,4)),console.log([1,2,3,4,5,6].find(function(r){return r>3})),console.log([1,2,3,4,5,6].findIndex(function(r){return r>3})),console.log([1,2,NaN].includes(1)),console.log([1,2,NaN].includes(NaN))}]);